// import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

buildscript {
    ext {
        commonsLibsVersion = "1.0.0"
        kotlinVersion = "1.8.22"
        //postgresVersion = "42.6.0"
        springBootVersion = "3.1.3"
        //springKafkaVersion = "3.0.6"
    }

    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        // classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
//        classpath("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")

    }
}

plugins {
    id 'org.springframework.boot' version "${springBootVersion}"
    id 'io.spring.dependency-management' version '1.1.3'
    id 'org.jetbrains.kotlin.jvm' version "${kotlinVersion}"
    id 'org.jetbrains.kotlin.plugin.spring' version "${kotlinVersion}"
    //id "org.flywaydb.flyway" version "9.19.0"
}

group = 'com.prjtower'
version = '1.0'

repositories {
    // mavenLocal() { url "file:/C://Users//zhourui//.m2//repository/" }
    mavenLocal()
    mavenCentral()

    //maven { url "file:/C://Users//zhourui//.m2//repository/" }
    maven { url "https://packages.confluent.io/maven/"}

}
dependencies {
    implementation("org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion")

    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-web")

    // jpa
    //implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    //implementation("org.postgresql:postgresql:$postgresVersion")
    //security
    implementation("org.springframework.boot:spring-boot-starter-security")
    //TODO implementation("org.springframework.boot:spring-boot-starter-oauth2-client")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server")

    //html
    //implementation("org.springframework.boot:spring-boot-starter-thymeleaf")

    // money
    //implementation("org.javamoney:moneta:1.3")

//    implementation("org.joda:joda-money:1.0.3")
//    // https://mvnrepository.com/artifact/org.jadira.usertype/usertype.core
//    implementation("org.jadira.usertype:usertype.core:6.0.1.GA")
//    //implementation("io.hypersistence.utils.hibernate")
//    // https://mvnrepository.com/artifact/io.hypersistence/hypersistence-utils-hibernate-62
    //implementation("io.hypersistence:hypersistence-utils-hibernate-62:3.5.2")


    // json
    //implementation("com.jayway.jsonpath:json-path")

    // kafka
    // implementation("com.projecttower:commons-messaging:$commonsLibsVersion")
    // implementation("org.springframework.kafka:spring-kafka:$springKafkaVersion")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.kafka:spring-kafka-test")
    // zonky
    // testImplementation("io.zonky.test:embedded-database-spring-test:2.3.0")
    //testImplementation 'io.zonky.test:embedded-postgres:2.0.3'
    //testImplementation 'org.flywaydb:flyway-core:9.15.2'
    //testImplementation 'org.flywaydb.flyway-test-extensions:flyway-spring-test:7.0.0'
    //testImplementation enforcedPlatform('io.zonky.test.postgres:embedded-postgres-binaries-bom:12.10.0')
    //testImplementation 'org.flywaydb:flyway-core:9.22.1'
    //testImplementation 'io.zonky.test:embedded-postgres:2.0.4'
    //testImplementation enforcedPlatform('io.zonky.test.postgres:embedded-postgres-binaries-bom:15.4.0')
    //testImplementation 'org.flywaydb.flyway-test-extensions:flyway-spring-test:9.5.0'

}

test {
    useJUnitPlatform()
}

tasks.named("bootBuildImage") {
    bindings = ["${projectDir}/bindings/ca-certificates:/platform/bindings/ca-certificates"]
    environment = ["BP_JVM_VERSION": "20"]
}

task listrepo {
    doLast {
        println "Repositories:"
        project.repositories.each { println "Name: " + it.name + "; url: " + it.url }
    }
}

compileKotlin.dependsOn listrepo
//
//task unpack(type: Copy) {
//    dependsOn bootJar
//    from(zipTree(tasks.bootJar.outputs.files.singleFile))
//    into("build/dependency")
//}
//
//task fullBuild dependsOn unpack



//tasks.named("bootJar") {
//    requiresUnpack '**/jruby-complete-*.jar'
//}
//tasks.named("bootJar") {
//    layered {
//        enabled = false
//    }
//}


